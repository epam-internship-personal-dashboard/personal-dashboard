<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <groupId>com.github.gokolo</groupId>
    <artifactId>go-personal-dashboard</artifactId>
    <version>0.14.0-SNAPSHOT</version>
    <packaging>war</packaging>

    <name>Personal Dashboard</name>
    <description>Web application to aggregate personal online data</description>
    <inceptionYear>2017</inceptionYear>

    <organization>
        <name>EPAM Systems</name>
        <url>https://epam.com</url>
    </organization>

    <scm>
        <developerConnection>scm:git:git@github.com:epam-internship-personal-dashboard/personal-dashboard.git</developerConnection>
        <connection>scm:git:git@github.com:epam-internship-personal-dashboard/personal-dashboard.git</connection>
        <url>git@github.com:epam-internship-personal-dashboard/personal-dashboard.git</url>
        <tag>HEAD</tag>
    </scm>

    <developers>
        <developer>
            <id>attilagyongyosi</id>
            <name>Attila Gyongyosi</name>
            <email>attila_gyongyosi@epam.com</email>
            <organization>EPAM Systems</organization>
            <roles>
                <role>Project Lead</role>
            </roles>
        </developer>
        <developer>
            <id>graceokolo</id>
            <name>Grace Okolo</name>
            <email>grace_okolo@epam.com</email>
            <organization>EPAM Systems</organization>
            <roles>
                <role>Software Engineer</role>
            </roles>
        </developer>
    </developers>

    <!--
        When using Maven, you have the ability to create "properties".
        Properties are nothing more than key-value pairs.
        In this case the keys are specified by the XML tag name, while values
        are the text inside the tags.

        Using the ${keyName} syntax, you can reference these values anywhere in this
        pom.xml file.

        Think of them as some kind of 'variables', promoting reusability.
    -->
    <!-- By the way, this is how you can leave comments in XML, HTML & SGML files :) -->
    <properties>
        <!--
            This property is a built-in one for the maven-resources-plugin and
            specifies the character encoding Maven should use for every text file
            inside a resource folder.

            If not specified, the operating system default will be used, which is
            ISO-8859-2 (Latin 2) for most Hungarian Windows systems for example.

            Consider always using UTF-8 as a best practice.
        -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!--
            The following properties are user-defined ones.
            It is really up to the person/people maintaining the pom.xml
            what goes here.

            I usually like to gather every dependency and plugin versions here
            as properties so that I have a central place where I can glimpse at
            the version of something without the need to locate it in the file.
        -->
        <dir.codequality>${project.basedir}/code-quality</dir.codequality>
        <version.java>1.8</version.java>
        <version.javax>7.0</version.javax>

        <version.logback>1.2.3</version.logback>
        <version.slf4j>1.7.25</version.slf4j>

        <version.mysql.connector>6.0.6</version.mysql.connector>
        <version.hikaricp>2.6.2</version.hikaricp>
        <version.hibernate.core>5.2.10.Final</version.hibernate.core>

        <version.servlet>3.1.0</version.servlet>
        <version.jstl>1.2</version.jstl>

        <version.spring>4.3.10.RELEASE</version.spring>
        <version.spring.security>3.2.3.RELEASE</version.spring.security>
        <version.spring.data>1.11.6.RELEASE</version.spring.data>
        <version.spring.security.taglibs>4.2.3.RELEASE</version.spring.security.taglibs>

        <version.jackson>2.9.0</version.jackson>

        <version.plugin.compiler>3.1</version.plugin.compiler>
        <version.plugin.versions>2.3</version.plugin.versions>
        <version.plugin.release>2.5.3</version.plugin.release>
        <version.plugin.war>3.1.0</version.plugin.war>

        <version.plugin.checkstyle>2.17</version.plugin.checkstyle>
        <version.plugin.findbugs>3.0.4</version.plugin.findbugs>
        <version.plugin.pmd>3.8</version.plugin.pmd>

        <version.plugin.jetty>9.4.6.v20170531</version.plugin.jetty>
    </properties>

    <dependencies>
        <!-- Logging Dependencies -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${version.logback}</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${version.slf4j}</version>
        </dependency>
        <!-- Logging Dependencies -->

        <!-- Database Dependencies -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>${version.mysql.connector}</version>
        </dependency>
        <dependency>
            <groupId>com.zaxxer</groupId>
            <artifactId>HikariCP</artifactId>
            <version>${version.hikaricp}</version>
        </dependency>
        <!-- Database Dependencies -->

        <!-- Web Dependencies -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>${version.servlet}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>${version.jstl}</version>
        </dependency>
        <!-- Web Dependencies -->

        <!-- Spring Dependencies -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${version.spring}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>${version.spring}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
            <version>${version.spring}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>${version.spring}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-web</artifactId>
            <version>${version.spring.security}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-config</artifactId>
            <version>${version.spring.security}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>${version.spring}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.data</groupId>
            <artifactId>spring-data-jpa</artifactId>
            <version>${version.spring.data}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-taglibs</artifactId>
            <version>${version.spring.security.taglibs}</version>
        </dependency>

        <!-- Spring Dependencies -->

        <!-- Lombok Dependencies -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.16.18</version>
            <scope>provided</scope>
        </dependency>
        <!-- Lombok Dependencies -->

        <!-- Dozer Dependencies -->
        <dependency>
            <groupId>net.sf.dozer</groupId>
            <artifactId>dozer</artifactId>
            <version>5.5.1</version>
        </dependency>
        <!-- Dozer Dependencies -->

        <!-- Hibernate Dependencies -->
        <dependency>
          <groupId>org.hibernate</groupId>
          <artifactId>hibernate-core</artifactId>
          <version>${version.hibernate.core}</version>
        </dependency>
        <!-- Hibernate Dependencies -->
        <dependency>
            <groupId>javax</groupId>
            <artifactId>javaee-api</artifactId>
            <version>${version.javax}</version>
        </dependency>
        <!-- Jackson Dependencies -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
            <version>${version.jackson}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${version.jackson}</version>
        </dependency>
        <!-- Jackson Dependencies -->

    </dependencies>

    <build>
        <plugins>
            <!--
                The maven-compiler-plugin is a built-in plugin
                that is a wrapper around the Java Compiler executable and has the
                sole role of compiling your source files.

                Here it is configured to consider source files as Java 8 source and
                compile them to a byte-code format compatible with Java 8 virtual machines.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${version.plugin.compiler}</version>
                <configuration>
                    <source>${version.java}</source>
                    <target>${version.java}</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>${version.plugin.war}</version>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>versions-maven-plugin</artifactId>
                <version>${version.plugin.versions}</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-release-plugin</artifactId>
                <version>${version.plugin.release}</version>
                <configuration>
                    <tagNameFormat>${project.version}</tagNameFormat>
                    <releaseProfiles>skipChecks</releaseProfiles>
                </configuration>
            </plugin>

            <!-- Code Quality Plugins -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>${version.plugin.checkstyle}</version>
                <configuration>
                    <configLocation>code-quality/checkstyle/checks.xml</configLocation>
                    <suppressionsLocation>${dir.codequality}/checkstyle/suppressions.xml</suppressionsLocation>
                    <violationSeverity>warning</violationSeverity>
                    <failOnViolation>true</failOnViolation>
                    <failsOnError>false</failsOnError>
                    <linkXRef>false</linkXRef>
                    <consoleOutput>false</consoleOutput>
                    <encoding>${project.build.sourceEncoding}</encoding>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>findbugs-maven-plugin</artifactId>
                <version>${version.plugin.findbugs}</version>
                <configuration>
                    <xmlOutput>true</xmlOutput>
                    <effort>Max</effort>
                    <threshold>Medium</threshold>
                    <excludeFilterFile>${dir.codequality}/findbugs/findbugs-exclude.xml</excludeFilterFile>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-pmd-plugin</artifactId>
                <version>${version.plugin.pmd}</version>
                <configuration>
                    <failOnViolation>true</failOnViolation>
                    <linkXRef>false</linkXRef>
                    <rulesets>
                        <ruleset>${dir.codequality}/pmd/basic.xml</ruleset>
                        <ruleset>${dir.codequality}/pmd/braces.xml</ruleset>
                        <ruleset>${dir.codequality}/pmd/codesize.xml</ruleset>
                        <ruleset>${dir.codequality}/pmd/design.xml</ruleset>
                        <ruleset>${dir.codequality}/pmd/empty.xml</ruleset>
                        <ruleset>${dir.codequality}/pmd/javabeans.xml</ruleset>
                        <ruleset>${dir.codequality}/pmd/strings.xml</ruleset>
                        <ruleset>${dir.codequality}/pmd/typeresolution.xml</ruleset>
                        <ruleset>${dir.codequality}/pmd/unnecessary.xml</ruleset>
                        <ruleset>${dir.codequality}/pmd/unusedcode.xml</ruleset>
                    </rulesets>
                    <verbose>true</verbose>
                </configuration>
            </plugin>
            <!-- /Code Quality Plugins -->

            <!-- Web Plugins -->
            <plugin>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <version>${version.plugin.jetty}</version>
                <configuration>
                    <scanIntervalSeconds>2</scanIntervalSeconds>
                    <httpConnector>
                        <port>9090</port>
                    </httpConnector>
                    <webApp>
                        <contextPath>/personal-dashboard</contextPath>
                    </webApp>
                </configuration>
            </plugin>
            <!-- /Web Plugins -->
        </plugins>
    </build>

    <reporting>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jxr-plugin</artifactId>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>checkstyle</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>findbugs-maven-plugin</artifactId>
                <configuration>
                    <xmlOutput>true</xmlOutput>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>cobertura-maven-plugin</artifactId>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>cobertura</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>
        </plugins>
    </reporting>

    <!--
        Maven profiles help you create separate configurations of your plugins.
        It's like having different set of outfits and choosing the right one
        depending on the day or your mood.

        In this actual setup, we have a profile called 'code-check' which is the
        default profile and will execute the code analysis plugins automatically
        when you build your project with Maven.

        The other one, 'skipChecks' does no such thing and can be used to skip
        static code analysis when you want to build faster, preferably during active
        development.

        To invoke a non-default profile, specify the -P<profile-name> switch after
        a Maven command.
        Example: mvn clean install -PskipChecks
    -->
    <profiles>
        <profile>
            <id>code-check</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <build>
                <pluginManagement>
                    <plugins>
                        <plugin>
                            <groupId>org.apache.maven.plugins</groupId>
                            <artifactId>maven-checkstyle-plugin</artifactId>
                            <executions>
                                <execution>
                                    <id>checkstyle-code-verification</id>
                                    <phase>verify</phase>
                                    <goals>
                                        <goal>check</goal>
                                    </goals>
                                </execution>
                            </executions>
                        </plugin>
                        <plugin>
                            <groupId>org.apache.maven.plugins</groupId>
                            <artifactId>maven-pmd-plugin</artifactId>
                            <executions>
                                <execution>
                                    <id>pmd-code-verification</id>
                                    <phase>verify</phase>
                                    <goals>
                                        <goal>check</goal>
                                    </goals>
                                </execution>
                            </executions>
                        </plugin>
                        <plugin>
                            <groupId>org.codehaus.mojo</groupId>
                            <artifactId>findbugs-maven-plugin</artifactId>
                            <executions>
                                <execution>
                                    <id>findbugs-code-verification</id>
                                    <phase>verify</phase>
                                    <goals>
                                        <goal>findbugs</goal>
                                    </goals>
                                </execution>
                            </executions>
                        </plugin>
                    </plugins>
                </pluginManagement>
            </build>
        </profile>

        <profile>
            <id>skipChecks</id>
        </profile>
    </profiles>
</project>
